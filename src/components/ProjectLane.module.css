.projectLaneContainer {
    width: 300px;
    background-color: rgba(0, 0, 0, 0.3);
    border-right: 3px solid rgba(255, 255, 255, 0.6); /* Default border, color overridden by style prop */
    backdrop-filter: blur(2px);
    padding: 15px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    break-inside: avoid; /* Prevents the lane from breaking across columns */
    margin-bottom: 20px; /* Adds space between lanes in the same column */
    /* min-height: 400px; Potentially set a min-height */
}

.projectHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background: rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.dragHandle {
    cursor: grab;
    padding: 0 10px;
    color: rgba(255, 255, 255, 0.5);
}

.projectTitleContainer {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-grow: 1;
}

.projectTitle {
    margin: 0;
    padding: 5px 10px; /* Match projectTitleInput padding */
    font-size: 1.2em;
    color: #fff;
    flex-grow: 1;
    cursor: pointer;
    line-height: 1.4;
    font-weight: bold; /* Match projectTitleInput font-weight */
    min-height: 1.6em; /* Ensure consistent height */
}

.editProjectBtn {
    background: none;
    border: none;
    color: #fff;
    font-size: 0.9em;
    cursor: pointer;
    padding: 2px 4px;
    border-radius: 3px;
    line-height: 1;
    opacity: 0.7;
    transition: opacity 0.2s ease;
}

.editProjectBtn:hover {
    opacity: 1;
}

.stickyInput {
    background-color: transparent;
    border-bottom: 1px solid rgba(255, 255, 255, 0.6);
    flex-grow: 1;
    margin-right: 10px;
    border: none;
    border-radius: 0px;
    color: #fff;
    font-size: 0.8em;
}

.stickyInput:focus-visible {
    outline: none;
}

.stickyInput::placeholder {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.8em;
}

.projectTitleInput {
    font-size: 1.2em; /* Match projectTitle font-size */
    font-weight: bold; /* Match projectTitle font-weight */
    padding: 4px 10px; /* Match projectTitle padding */
    line-height: 1.4; /* Match projectTitle line-height */
    min-height: 1.6em; /* Match projectTitle min-height */
    outline: none;
    font-family: inherit;
    color: #fff; /* Match projectTitle color */
    border: none;
    border-bottom: 2px solid rgba(255, 255, 255, 0.8);
    background-color: transparent;
    border-radius: 0;
}

.projectTitleInput:focus {
    border-bottom-color: transparent;
}

.deleteProjectBtn {
    background: none;
    border: none;
    color: #ff4d4f;
    font-size: 1.2em;
    cursor: pointer;
    padding: 0 5px;
    line-height: 1; /* Ensure consistent alignment */
}

.deleteProjectBtn:hover {
    color: #cf1322;
}

.taskList {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 10px; /* Space between task cards */
    overflow: visible;
}

.taskCard {
    position: relative;
    display: flex; /* Allow for task header and content alignment */
    flex-direction: column; /* Stack header and content */
    background: #fff;
    border-radius: 0;
    padding: 5px;
}

.taskCard::before,
.taskCard::after {
    content: '';
    position: absolute;
    bottom: 10px;
    width: 40%;
    height: 10px;
    box-shadow: 0 5px 14px rgba(0, 0, 0, 0.7);
    z-index: -1;
    transition: all 0.3s ease-in-out;
}

.taskCard::before {
    left: 15px;
    transform: skew(-5deg) rotate(-5deg);
}

.taskCard::after {
    right: 15px;
    transform: skew(5deg) rotate(5deg);
}

.taskCard:hover::before,
.taskCard:hover::after {
    box-shadow: 0 2px 14px rgba(0, 0, 0, 0.4);
}

.taskCard:hover::before {
    left: 5px;
}

.taskCard:hover::after {
    right: 5px;
}

.taskHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0px;
    margin-bottom: 0px; /* Space between header and task items (once added) */
}

.taskTitle {
    margin: 0;
    font-weight: bold;
    color: #000;
    flex-grow: 1; /* Allow title to take space */
    cursor: pointer; /* Indicate it's interactive */
    line-height: 1.4;
    padding: 2px 0;
    font-size: 0.9em;
}

.taskTitleInput {
    font-size: 1em; /* Match task title font size */
    padding: 2px 0; /* Match taskTitle padding */
    border: none;
    border-bottom: 2px solid #ccc;
    border-radius: 0;
    background-color: transparent;
    flex-grow: 1;
    margin-right: 8px; /* Space before delete button */
    font-weight: bold; /* Match task title font weight */
    line-height: 1.4;
    outline: none;
    font-family: inherit;
}

.taskTitleInput:focus {
    border-bottom-color: #1890ff;
}

.deleteTaskBtn {
    background: none;
    border: none;
    color: #000; /* Lighter delete icon for tasks */
    font-size: 0.9em;
    cursor: pointer;
    padding: 0 3px;
    line-height: 1;
}

.deleteTaskBtn:hover {
    color: #ff4d4f; /* Standard delete color on hover */
}

.taskItemsContainer {
    display: flex;
    flex-direction: column;
    gap: 0px;
    margin-bottom: 0px;
}

.taskItem {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px 0; /* Small padding for items */
}

.taskItemCheckbox {
    margin: 0;
    /* Consider custom styling for checkboxes if desired later */
}

.taskItemText {
    flex-grow: 1;
    font-size: 0.8em;
    padding: 2px 0; /* Align with input if needed */
    cursor: pointer; /* Indicate it's interactive */
    line-height: 1.4;
    min-height: 1.33em; /* Ensure consistent height */
}

.taskItemTextInput {
    flex-grow: 1;
    font-size: 0.95em;
    padding: 2px 0; /* Match taskItemText exactly */
    border: none;
    border-bottom: 1px solid #999;
    border-radius: 0;
    background-color: transparent;
    line-height: 1.4;
    min-height: 1.33em; /* Match taskItemText */
    outline: none;
    font-family: inherit;
}

.taskItemTextInput:focus {
    border-bottom-color: #1890ff;
}

.deleteItemBtn {
    background: none;
    border: none;
    color: #000; /* Very light gray for item delete */
    font-size: 0.85em;
    cursor: pointer;
    padding: 0 2px;
    line-height: 1;
    visibility: hidden; /* Hidden by default */
}

.taskItem:hover .deleteItemBtn {
    visibility: visible; /* Show on hover of the taskItem */
}

.deleteItemBtn:hover {
    color: #ef4444; /* Red on hover */
}

.completedItemText {
    text-decoration: line-through;
    color: #ddd;
}

.completedSectionDetails {
    margin-top: 10px;
    border-top: 1px dashed #eee;
    padding-top: 10px;
}

.completedSectionSummary {
    cursor: pointer;
    font-weight: 400;
    color: #eee;
    margin-bottom: 5px;
    font-size: 0.7em;
}

.completedSectionSummary:hover {
    color: #fff;
    font-weight: 700;
}

.completedItemsContainer {
    display: flex;
    flex-direction: column;
    gap: 6px;
    padding-left: 20px; /* Indent completed items slightly */
}

.completedTaskItem {
    /* Can add specific styles for completed items if different from active beyond text-decoration */
}

.addItemForm {
    display: flex;
    gap: 8px;
    margin-top: 10px;
    padding: 0 0 0 10px;
    border: 1px solid #f0f0f0;
    border-radius: 20px;
}

.addItemInput {
    flex-grow: 1;
    padding: 6px;
    border: none;
    border-bottom: 1px solid #d9d9d9;
    background-color: transparent;
    border-radius: 0;
    font-size: 0.9em;
}

.addItemBtn {
    background-color: transparent;
    border: 1px dashed #ccc;
    color: #fff;
    padding: 4px 8px;
    border-radius: 14px; /* Pill shape */
    cursor: pointer;
    font-size: 0.85em;
}

.addItemBtn:hover {
    background-color: #096dd9;
}

.noTasksMessage {
    text-align: center;
    color: #ccc;
    font-style: italic;
    padding: 20px 0;
}

.addTaskForm {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
    padding-bottom: 5px;
    border-bottom: 1px solid #f0f0f0;
}

.newTaskInput {
    flex-grow: 1;
    padding: 2px 4px;
    border: none;
    border-radius: 0px;
    background-color: transparent;
    border-bottom: 1px solid rgba(255, 255, 255, 0.6);
}

.addTaskBtn {
    background-color: #52c41a; /* Green for add */
    color: white;
    border: none;
    padding: 5px;
    border-radius: 0px;
    cursor: pointer;
    font-weight: bold;
}

.addTaskBtn:hover {
    background-color: #389e0d;
}

.projectFooter {
    margin-top: auto; /* Pushes footer to the bottom */
    padding-top: 10px;
    font-size: 0.9em;
    color: #ccc;
    border-top: 1px solid #f0f0f0;
}

.taskFooter {
    margin-top: 10px;
    display: flex;
    flex-direction: column; /* Stack assigned people and tagging popup */
    gap: 8px;
}

.assignedPeopleContainer {
    display: flex;
    align-items: center;
    gap: 6px;
    flex-wrap: wrap; /* Allow avatars to wrap if many */
}

.personAvatar {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background-color: #e0e0e0; /* Default avatar bg */
    color: #555;
    font-size: 0.8em;
    font-weight: bold;
    cursor: pointer; /* For removal */
    border: 1px solid #ccc;
}

.overflowAvatar {
    background-color: #bdbdbd;
    cursor: default;
}

.addPersonBtn {
    background-color: transparent;
    border: 1px dashed #ccc;
    color: #555;
    padding: 4px 8px;
    border-radius: 14px; /* Pill shape */
    cursor: pointer;
    font-size: 0.85em;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.addPersonBtn:hover {
    background-color: #f0f0f0;
    border-color: #bbb;
}

.personTaggingPopup {
    margin-top: 8px;
    padding: 10px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.personNameInput {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 3px;
    font-size: 0.9em;
}

.personSuggestionsList {
    list-style: none;
    padding: 0;
    margin: 0;
    max-height: 100px; /* Limit height */
    overflow-y: auto;
    border: 1px solid #eee;
    border-radius: 3px;
}

.personSuggestionsList li {
    padding: 6px 8px;
    cursor: pointer;
    font-size: 0.9em;
}

.personSuggestionsList li:hover {
    background-color: #e6f7ff;
}

.personTaggingPopup button {
    padding: 6px 10px;
    border-radius: 3px;
    border: 1px solid transparent;
    cursor: pointer;
}

.confirmAddPersonBtn {
    background-color: #52c41a;
    color: white;
}
.confirmAddPersonBtn:hover {
    background-color: #389e0d;
}

.cancelAddPersonBtn {
    background-color: #f5f5f5;
    border-color: #ddd;
}
.cancelAddPersonBtn:hover {
    background-color: #e8e8e8;
}

.reminderIconBtn {
    background-color: transparent;
    border: 1px dashed #ccc;
    color: #555;
    padding: 4px 8px;
    border-radius: 14px; /* Pill shape */
    cursor: pointer;
    font-size: 0.85em;
}

.reminderIconBtn:hover {
    background-color: #f0f0f0;
    border-color: #bbb;
}

.reminderSection {
    display: flex;
    align-items: center;
    gap: 6px;
}

.reminderContainer {
    display: flex;
    align-items: center;
    gap: 6px;
    margin-top: 8px; /* Space it from person tagging if both are present */
}

.reminderLabel {
    font-size: 0.85em;
    color: #555;
}

.reminderInput {
    padding: 4px 6px;
    border: 1px solid #ccc;
    border-radius: 3px;
    font-size: 0.85em;
    background-color: white; /* Ensure good contrast */
}

.clearReminderBtn {
    background: none;
    border: none;
    color: #d1d5db;
    font-size: 0.9em;
    cursor: pointer;
    padding: 0 3px;
    line-height: 1;
}

.clearReminderBtn:hover {
    color: #ef4444;
}

.taskActionsContainer {
    display: flex;
    justify-content: flex-start; /* Align items (like color picker) to the start */
    align-items: center;
    gap: 10px;
    margin-top: 8px;
    position: relative; /* For positioning the color palette */
}

.colorPickerContainer {
    position: relative; /* For palette positioning */
}

.colorOption {
    width: 24px;
    height: 24px;
    border-radius: 4px;
    border: 1px solid #eee;
    cursor: pointer;
    padding: 0;
}

.colorOption:hover {
    border-color: #999;
    transform: scale(1.1);
}

.mainActionsRow {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    gap: 5px;
}

.avatarsDisplayContainer {
    display: flex;
    align-items: center;
    gap: 6px;
    flex-wrap: wrap;
}

.actionButtonsGroup {
    display: flex;
    align-items: center;
    /* gap: 6px; */ /* Ensure this is commented or removed */
    justify-content: space-between; /* Add this */
    flex-grow: 1; /* Add this */
    /* margin-left: auto; If this was here from a previous step, ensure it's removed or not needed */
}

.reminderEditingContainer {
    display: flex;
    align-items: center;
    gap: 6px;
}

.datepickerContainer {
    position: relative;
    z-index: 99999;
    isolation: isolate;
    display: flex;
    align-items: center;
}

/* Custom styles for react-datetime-picker to fix visibility and z-index issues */
.datepickerContainer :global(.react-datetime-picker) {
    z-index: 99999 !important;
    position: relative;
    line-height: 16px !important;
}

.datepickerContainer :global(.react-datetime-picker__wrapper) {
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
    z-index: 99999 !important;
    padding: 4px 6px !important;
    min-height: 24px !important;
    display: flex !important;
    align-items: center !important;
}

.datepickerContainer :global(.react-datetime-picker__inputGroup) {
    background: white;
    color: #333;
    font-size: 11px !important;
    line-height: 16px !important;
    display: flex !important;
    align-items: center !important;
    min-height: 16px !important;
}

.datepickerContainer :global(.react-datetime-picker__inputGroup__input) {
    color: #333 !important;
    background: white !important;
    font-size: 11px !important;
    padding: 0 !important;
    border: none !important;
    line-height: 16px !important;
    min-height: 16px !important;
    margin-left: 0 !important;
}

.datepickerContainer :global(.react-datetime-picker__inputGroup__divider) {
    color: #333 !important;
    font-size: 11px !important;
    line-height: 16px !important;
}

.datepickerContainer :global(.react-datetime-picker__button) {
    padding: 2px !important;
    background: white !important;
    border: none !important;
    line-height: 16px !important;
}

/* Global Calendar Styles */
:global(.react-calendar) {
    z-index: 999999 !important;
    background: white !important;
    border: 1px solid #ccc !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
}

:global(.react-calendar__tile) {
    background: white !important;
    color: #333 !important;
}

:global(.react-calendar__tile:hover) {
    background: #e6f7ff !important;
    color: #333 !important;
}

:global(.react-calendar__tile--active) {
    background: #1890ff !important;
    color: white !important;
}

:global(.react-calendar__tile--now) {
    background: #ffec3d !important;
    color: #333 !important;
}

:global(.react-calendar__tile:disabled) {
    color: #ccc !important;
}

:global(.react-calendar__month-view__weekdays) {
    background: #f5f5f5 !important;
}

:global(.react-calendar__month-view__weekdays__weekday) {
    color: #333 !important;
    font-weight: bold !important;
    text-decoration: none;
}

:global(.react-calendar__navigation) {
    background: white !important;
}

:global(.react-calendar__navigation button) {
    color: #333 !important;
    background: white !important;
}

:global(.react-calendar__navigation button:hover) {
    background: #e6f7ff !important;
}

:global(.react-clock) {
    z-index: 999999 !important;
    background: white !important;
    border: 1px solid #ccc !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2) !important;
}

/* Ensure the calendar container itself has highest priority and proper styling */
:global(.react-datetime-picker__calendar) {
    z-index: 10 !important; /* Maximum z-index value */
    position: absolute !important;
    background: white !important;
    border: 1px solid #ccc !important;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3) !important;
    transform: translateZ(0) !important; /* Force hardware acceleration */
}

:global(.react-datetime-picker__clock) {
    z-index: 2147483647 !important; /* Maximum z-index value */
    position: absolute !important;
    background: white !important;
    border: 1px solid #ccc !important;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3) !important;
    transform: translateZ(0) !important; /* Force hardware acceleration */
}

.reminderText {
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    font-size: 0.7em;
}

.reminderSetContainer {
    border: 1px solid #fff;
    border-radius: 20px;
    padding: 0 10px;
}

.clearReminderBtnInline {
    background: none;
    border: none;
    color: #d1d5db; /* Match existing clearReminderBtn */
    font-size: 0.9em; /* Match existing clearReminderBtn */
    cursor: pointer;
    padding: 0 3px; /* Match existing clearReminderBtn */
    line-height: 1; /* Match existing clearReminderBtn */
    display: inline-flex; /* To align with text */
    align-items: center;
}

.clearReminderBtnInline:hover {
    color: #ff4d4f; /* Match existing clearReminderBtn */
}

.calendarToggleBtn {
    background: none;
    border: none;
    color: #fff;
    font-size: 1.1em;
    cursor: pointer;
    padding: 0 5px;
    margin-left: 5px;
    opacity: 0.7;
    transition: opacity 0.2s ease;
}

.calendarToggleBtn:hover {
    opacity: 1;
}

.colorPickerPopover {
    background-color: #333;
    border: 1px solid #555;
    border-radius: 4px;
    padding: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
}

.predefinedColors {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-top: 10px;
    border-bottom: 1px solid #555;
    padding-bottom: 10px;
    margin-bottom: 10px;
}

.clearColorButton {
    width: 100%;
    text-align: center;
    background-color: #555;
    color: #fff;
    border: none;
    padding: 5px;
    border-radius: 3px;
    cursor: pointer;
}

.clearColorButton:hover {
    background-color: #666;
}

:global(.project-drag-handle) {
    cursor: move;
}
